.\" section 3 man page for dbg
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2022. The man page is dedicated to Grace Hopper who popularised the
.\" term 'debugging' after a real moth in a mainframe was causing it to
.\" malfunction (the term had already existed but she made it popular
.\" because of actually removing an insect that was causing a malfunction).
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH err 3  "24 December 2022" "err"
.SH NAME
.BR err(),
.BR verr(),
.BR ferr(),
.BR vferr(),
.BR errp(),
.BR verrp(),
.BR ferrp(),
.BR vferrp()
\- fatal error message facility
.SH SYNOPSIS
\fB#include "dbg.h"\fP
.sp
.BI "extern bool err_output_allowed;		/* false ==> disable error messages */"
.sp
.BI "void err(int exitcode, const char *name, const char *fmt, ...);"
.br
.BI "void verr(int exitcode, char const *name, char const *fmt, va_list ap);"
.br
.BI "void ferr(int exitcode, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vferr(int exitcode, FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void errp(int exitcode, const char *name, const char *fmt, ...);"
.br
.BI "void verrp(int exitcode, char const *name, char const *fmt, va_list ap);"
.br
.BI "void ferrp(int exitcode, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vferrp(int exitcode, FILE *stream, char const *name, char const *fmt, va_list ap);"
.SH DESCRIPTION
These functions provide a way to write fatal error messages to a stream such as \fBstderr\fP.
.SS Errno versions
.PP
The functions \fBerrp()\fP and \fBferrp()\fP write a message according to the value of \fBerrno\fP, making sure to restore the \fBerrno\fP value in the case the function returns.
.SS Alternative output \fBFILE *\fP stream
The functions that do not take a \fBFILE *\fP or a \fBchar *\fP write to \fBstderr\fP.
The functions
.BR ferr(),
.BR vferr(),
.BR ferrp()
and
.BR vferrp()
can write to an alternative \fBFILE *\fP stream.
.SS Variadic versions
.PP
The functions
.BR verr(),
.BR vferr(),
.BR verrp()
and
.BR vferrp()
are equivalent to the functions
.BR err(),
.BR ferr(),
.BR errp()
and
.BR ferrp()
except that they are called with a \fIva_list\fP instead of a variable number of arguments.
The state of the \fIva_list\fP is not modified by these functions.
.SS Format of the fmt string
The format string is a character string in the same form as \fBprintf(3)\fP.
As these are quite complex please refer to the \fBprintf(3)\fP man page for more details and examples.
.SS Output control
.PP
When \fBerr_output_allowed == false\fP the \fBerr()\fP functions will not print anything.
.SH RETURN VALUE
.PP
These functions do not return at all.
More specifically they do call \fBexit(3)\fP with the appropriate exit code but immediately after call either \fB__builtin_unreachable\fP or \fBabort(3)\fP depending on the value of \fB__has_builtin(__builtin_unreachable)\fP, thereby terminating the program.
.SH NOTES
.SS Variadic arguments
In the \fIva_list\fP functions, the argument \fIap\fP is not checked for consistency like they are using the primary interfaces.
For this reason these versions are not recommended for use.
.SS In case of NULL name
If \fIname\fP is \fBNULL\fP it will be set to
.BR "((NULL name))"
and the following warning, preceded by a newline, will be issued:
.sp
.BI "Warning: foo: name is NULL, forcing name to be: ((NULL name))"
.sp
where \fBfoo\fP is the name of the function.
.SS The fmt argument
The \fBfmt\fP argument in the functions is a \fBprintf(3)\fP style format.
If the format requires arguments, then such arguments may be given after the fmt.
For modern C compilers, the agreement between any % directives in fmt, and any arguments that may follow is checked by the format attribute facility.
Thus having too many arguments, too few arguments, or arguments of the wrong type will result in compiler warnings.
.SS In case of NULL fmt
If \fIfmt\fP is \fBNULL\fP it will be set to
.BR "((NULL fmt))"
and the following warning, preceded by a newline, will be issued:
.sp
.BI "Warning: foo: fmt is NULL, forcing fmt to be: ((NULL fmt))"
.sp
where \fBfoo\fP is the name of the function.
.sp
When the \fIfmt\fP is \fBNULL\fP or contains no \fB%\fP specifiers the arguments following \fIfmt\fP will be ignored.
.SS Error checking
All writes are checked for errors.
Write error messages are written to stderr.
However, a persistent problem writing to the stream (such as if the stream being written to was previously closed) will likely prevent such an error from being seen.
.SS Newlines
All functions output extra newlines to help let the messages stand out better.
.SH EXAMPLE
.PP
For an example proper please refer to \fBdbg(3)\fP.
.SH SEE ALSO
.BR printf(3),
.BR dbg(3),
.BR msg(3),
.BR printf_usage(3),
.BR warn(3),
.BR werr(3),
.BR warn_or_err(3)
.SH HISTORY
The dbg facility was first written by Landon Curt Noll in 1989.
Version 2.0 was developed and tested within the IOCCC mkiocccentry GitHub repo.
